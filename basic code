#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>

using namespace std;

class Minesweeper {
    vector<vector<char>> board;
    vector<vector<char>> displayBoard;
    int rows;
    int cols;
    int mines;

public:
    Minesweeper(int r, int c, int m) : rows(r), cols(c), mines(m) {
        board.resize(rows, vector<char>(cols, '0'));
        displayBoard.resize(rows, vector<char>(cols, '-'));
        srand(time(0));
        placeMines();
        calculateNumbers();
    }

    void placeMines() {
        int placedMines = 0;
        while (placedMines < mines) {
            int r = rand() % rows;
            int c = rand() % cols;
            if (board[r][c] == '0') {
                board[r][c] = 'M';
                placedMines++;
            }
        }
    }

    void calculateNumbers() {
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (board[r][c] == 'M') continue;
                int mineCount = 0;
                for (int i = -1; i <= 1; i++) {
                    for (int j = -1; j <= 1; j++) {
                        int nr = r + i;
                        int nc = c + j;
                        if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && board[nr][nc] == 'M') {
                            mineCount++;
                        }
                    }
                }
                board[r][c] = mineCount + '0';
            }
        }
    }

    void display() {
        for (const auto& row : displayBoard) {
            for (const auto& cell : row) {
                cout << cell << " ";
            }
            cout << endl;
        }
    }

    bool openCell(int r, int c) {
        if (r < 0 || r >= rows || c < 0 || c >= cols || displayBoard[r][c] != '-') return true;
        if (board[r][c] == 'M') return false;
        displayBoard[r][c] = board[r][c];
        if (board[r][c] == '0') {
            for (int i = -1; i <= 1; i++) {
                for (int j = -1; j <= 1; j++) {
                    openCell(r + i, c + j);
                }
            }
        }
        return true;
    }

    void play() {
        while (true) {
            display();
            int r, c;
            cout << "Enter row and column to open: ";
            cin >> r >> c;
            if (!openCell(r, c)) {
                cout << "Game Over! You hit a mine!" << endl;
                break;
            }
            if (checkWin()) {
                cout << "Congratulations! You won!" << endl;
                break;
            }
        }
    }

    bool checkWin() {
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (displayBoard[r][c] == '-' && board[r][c] != 'M') {
                    return false;
                }
            }
        }
        return true;
    }
};

int main() {
    int rows, cols, mines;
    cout << "Enter rows, columns, and mines: ";
    cin >> rows >> cols >> mines;
    Minesweeper game(rows, cols, mines);
    game.play();
    return 0;
}
